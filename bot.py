import json
import random
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hlink

API_TOKEN = "8493652517:AAF-0_XnnIflzh0lAx5mQisHdX3ILkAXcKE"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
SPONSORS = [
    "S1eepy_Stars",
    "RussiansDurov",
    "star_yum",
    "ygolokamika",
    "spirix_nft",
    "shizonick"
]

DATA_FILE = "data.json"

# --- –ó–∞–≥–æ—Ç–æ–≤–∫–∏ –∫–∞–ø—á–∏ ---
CAPTCHAS = [(f"{a}+{b}", str(a+b)) for a in range(1, 13) for b in range(1, 13)]
CAPTCHAS = CAPTCHAS[:25]  # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 25 –ø—Ä–∏–º–µ—Ä–æ–≤

# --- –ë–æ—Ç ---
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)


# --- –†–∞–±–æ—Ç–∞ —Å JSON ---
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}


def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def check_subscriptions(user_id):
    for channel in SPONSORS:
        try:
            member = await bot.get_chat_member(f"@{channel}", user_id)
            if member.status == "left":
                return False
        except:
            return False
    return True


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def reply_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã ‚≠êÔ∏è"), KeyboardButton("–ë—É—Å—Ç –∑–∞ –∑–≤—ë–∑–¥—ã üíé"))
    kb.add(KeyboardButton("–í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã ‚≠êÔ∏è"), KeyboardButton("–ü–æ–¥–∞—Ä–æ–∫ üéÅ"))
    return kb


def sponsors_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for channel in SPONSORS:
        kb.insert(InlineKeyboardButton(text=f"@{channel}", url=f"https://t.me/{channel}"))
    kb.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subs"))
    return kb


def withdraw_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("15 ‚≠êÔ∏è", callback_data="withdraw_15"),
        InlineKeyboardButton("25 ‚≠êÔ∏è", callback_data="withdraw_25"),
        InlineKeyboardButton("50 ‚≠êÔ∏è", callback_data="withdraw_50"),
        InlineKeyboardButton("75 ‚≠êÔ∏è", callback_data="withdraw_75"),
        InlineKeyboardButton("100 ‚≠êÔ∏è", callback_data="withdraw_100")
    )
    return kb


# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    user_id = str(msg.from_user.id)
    data = load_data()

    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π ‚Üí –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    args = msg.get_args()
    if user_id not in data:
        data[user_id] = {"stars": 0, "invited": [], "captcha_ok": False, "subscribed": False, "boosted": False}
        save_data(data)

        if args and args.isdigit() and args != user_id:
            if args in data and user_id not in data[args]["invited"]:
                data[args]["stars"] += 0.5
                data[args]["invited"].append(user_id)
                save_data(data)
                await bot.send_message(args, f"üë• –ù–æ–≤—ã–π –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ! +0.5 ‚≠êÔ∏è")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏
    if not data[user_id]["captcha_ok"]:
        expr, ans = random.choice(CAPTCHAS)
        data[user_id]["captcha"] = ans
        save_data(data)
        await msg.answer(f"ü§ñ –î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤ —Ä–µ—à–∏ –ø—Ä–∏–º–µ—Ä:\n\n<b>{expr} = ?</b>")
        return

    # –ï—Å–ª–∏ –∫–∞–ø—á–∞ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞
    if not data[user_id]["subscribed"]:
        await msg.answer("–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:", reply_markup=sponsors_kb())
    else:
        await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ‚ú®", reply_markup=reply_kb())


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏ ---
@dp.message_handler(lambda m: m.text and m.text.isdigit())
async def captcha_check(msg: types.Message):
    user_id = str(msg.from_user.id)
    data = load_data()

    if user_id in data and not data[user_id]["captcha_ok"]:
        if msg.text == data[user_id]["captcha"]:
            data[user_id]["captcha_ok"] = True
            save_data(data)
            await msg.answer("‚úÖ –í–µ—Ä–Ω–æ!\n–¢–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:", reply_markup=sponsors_kb())
        else:
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /start")


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
@dp.callback_query_handler(lambda c: c.data == "check_subs")
async def check_subs(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    if await check_subscriptions(user_id):
        data = load_data()
        data[user_id]["subscribed"] = True
        save_data(data)
        await call.message.answer("üéâ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!", reply_markup=reply_kb())
    else:
        await call.message.answer("‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!")


# --- –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å ---
@dp.message_handler(lambda m: m.text == "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã ‚≠êÔ∏è")
async def earn(msg: types.Message):
    user_id = str(msg.from_user.id)
    data = load_data()
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"
    await msg.answer(
        f"<b>ü§ù –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å 0.5 ‚≠êÔ∏è</b>\n\n"
        f"üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: <b>{ref_link}</b>\n"
        f"üë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª: <b>{len(data[user_id]['invited'])}</b> —á–µ–ª.\n"
        f"‚≠ê –ë–∞–ª–∞–Ω—Å: <b>{data[user_id]['stars']}</b>"
    )


# --- –ë—É—Å—Ç ---
@dp.message_handler(lambda m: m.text == "–ë—É—Å—Ç –∑–∞ –∑–≤—ë–∑–¥—ã üíé")
async def boost(msg: types.Message):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ó–∞–±—É—Å—Ç–∏—Ç—å –∫–∞–Ω–∞–ª", url="https://t.me/boost/Vestelll1"))
    kb.add(InlineKeyboardButton("‚úÖ –Ø –∑–∞–±—É—Å—Ç–∏–ª", callback_data="check_boost"))
    await msg.answer("–ó–∞ –±—É—Å—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +2 ‚≠êÔ∏è", reply_markup=kb)


from datetime import datetime

@dp.message_handler(lambda m: m.text == "–ü–æ–¥–∞—Ä–æ–∫ üéÅ")
async def gift(msg: types.Message):
    user_id = str(msg.from_user.id)
    data = load_data()

    today = datetime.now().strftime("%Y-%m-%d")  # —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    last_gift = data[user_id].get("last_gift", "")

    if last_gift == today:
        await msg.answer("‚ùå –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –ø–æ–¥–∞—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.")
    else:
        data[user_id]["stars"] += 1
        data[user_id]["last_gift"] = today
        save_data(data)
        await msg.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–æ–ª—É—á–∏–ª +1 ‚≠êÔ∏è –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫!", reply_markup=reply_kb())

@dp.callback_query_handler(lambda c: c.data == "check_boost")
async def check_boost(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    data = load_data()

    member = await bot.get_chat_member("@Vestelll1", user_id)
    if getattr(member, "is_premium", False):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º/–±—É—Å—Ç
        if not data[user_id]["boosted"]:
            data[user_id]["stars"] += 2
            data[user_id]["boosted"] = True
            save_data(data)
            await call.message.answer("üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –±—É—Å—Ç! +2 ‚≠êÔ∏è –Ω–∞—á–∏—Å–ª–µ–Ω–æ.")
        else:
            await call.message.answer("‚ùå –¢—ã —É–∂–µ –∑–∞–±—É—Å—Ç–∏–ª, –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—É—á–∏–ª.")
    else:
        await call.message.answer("‚ùå –ë—É—Å—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")


# --- –í—ã–≤–æ–¥ ---
@dp.message_handler(lambda m: m.text == "–í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã ‚≠êÔ∏è")
async def withdraw(msg: types.Message):
    user_id = str(msg.from_user.id)
    data = load_data()
    await msg.answer(
        f"–í—ã–≤–æ–¥ –∑–≤—ë–∑–¥\n\n–ë–∞–ª–∞–Ω—Å: {data[user_id]['stars']} ‚≠êÔ∏è\n\n–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?",
        reply_markup=withdraw_kb()
    )


@dp.callback_query_handler(lambda c: c.data.startswith("withdraw_"))
async def withdraw_handler(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    data = load_data()

    # —Å—É–º–º–º –ø–æ callback_data
    amount = int(call.data.split("_")[1])
    
    if data[user_id]["stars"] >= amount:
        data[user_id]["stars"] -= amount
        save_data(data)
        await call.message.answer(f"‚úÖ <b>–í—ã–≤–æ–¥ {amount} ‚≠êÔ∏è —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!</b> –ü—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤.")
    else:
        await call.message.answer("‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚≠êÔ∏è –¥–ª—è –≤—ã–≤–æ–¥–∞.</b>")


# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
